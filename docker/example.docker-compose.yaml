version: '3.8'


networks:
  main_network:
    external: true

services:
  auth:
    container_name: AuthService
    image: ${AUTH_IMAGE}
    environment:
      JWT_SECRET: ${AUTH_JWT_SECRET}
      DB_HOST: postgres_auth
      DB_PORT: ${AUTH_DB_PORT}
      DB_USER: ${AUTH_DB_USER}
      DB_PASSWORD: ${AUTH_DB_PASSWORD}
      DB_NAME: ${AUTH_DB_NAME}
      REDIS_HOST: redis_auth
      REDIS_PORT: ${AUTH_REDIS_PORT}
      REDIS_PASSWORD: ${AUTH_REDIS_PASSWORD}
      PORT: ${AUTH_PORT}
      RABBITMQ_USER: ${AUTH_RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${AUTH_RABBITMQ_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: ${AUTH_RABBITMQ_PORT}
      RABBITMQ_EXCHANGES: ${AUTH_RABBITMQ_EXCHANGES}
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    depends_on:
      postgres_auth:
        condition: service_healthy
      redis_auth:
        condition: service_healthy
    networks:
      - main_network

  dummy:
    container_name: DummyService
    image: ${DUMMY_IMAGE}
    environment:
      DB_HOST: postgres_dummy
      DB_PORT: 5432
      DB_USER: ${DUMMY_DB_USER}
      DB_PASSWORD: ${DUMMY_DB_PASSWORD}
      DB_NAME: ${DUMMY_DB_NAME}
      REDIS_HOST: redis_dummy
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${DUMMY_REDIS_PASSWORD}
      PORT: ${DUMMY_PORT}
      JWT_SECRET: ${DUMMY_JWT_SECRET}
    ports:
      - "${DUMMY_PORT}:${DUMMY_PORT}"
    depends_on:
      postgres_dummy:
        condition: service_healthy
      redis_dummy:
        condition: service_healthy
    networks:
      - main_network

  postgres_auth:
    container_name: ${AUTH_POSTGRES_CONTAINER}
    image: ${AUTH_POSTGRES_IMAGE}
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_DB: ${AUTH_DB_NAME}
    ports:
      - "${AUTH_DB_PORT}:5432"
    volumes:
      - pg_auth_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db/seed.sql:/docker-entrypoint-initdb.d/seed.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_DB_USER} -d ${AUTH_DB_NAME}"]
      interval: 10s
      retries: 5
      start_period: 10s
    networks:
      - main_network


  postgres_dummy:
    container_name: ${DUMMY_POSTGRES_CONTAINER}
    image: ${DUMMY_POSTGRES_IMAGE}
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DUMMY_DB_USER}
      POSTGRES_PASSWORD: ${DUMMY_DB_PASSWORD}
      POSTGRES_DB: ${DUMMY_DB_NAME}
    ports:
      - "${DUMMY_DB_PORT}:5432"
    volumes:
      - pg_dummy_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db/seed.sql:/docker-entrypoint-initdb.d/seed.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DUMMY_DB_USER} -d ${DUMMY_DB_NAME}"]
      interval: 10s
      retries: 5
      start_period: 10s
    networks:
      - main_network


  redis_auth:
    container_name: ${AUTH_REDIS_CONTAINER}
    image: ${AUTH_REDIS_IMAGE}
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${AUTH_REDIS_PASSWORD}"]
    ports:
      - "${AUTH_REDIS_PORT}:6379"
    volumes:
      - redis_auth_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 5s
    networks:
      - main_network

  redis_dummy:
    container_name: ${DUMMY_REDIS_CONTAINER}
    image: ${DUMMY_REDIS_IMAGE}
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${DUMMY_REDIS_PASSWORD}"]
    ports:
      - "${DUMMY_REDIS_PORT}:6379"
    volumes:
      - redis_dummy_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 5s
    networks:
      - main_network

volumes:
  pg_auth_data:
  pg_dummy_data:
  redis_auth_data:
  redis_dummy_data:
